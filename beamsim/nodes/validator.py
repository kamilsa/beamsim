"""
Validator node implementation for the BEAMSim discrete-event simulation engine.

This module defines the Validator class, which represents a validator node
responsible for generating and sending signatures in the network simulation.
"""

from beamsim.core.node import Node
from beamsim.core.message import Message


class Validator(Node):
    """
    A class representing a validator node in the simulation.
    """

    def __init__(self, node_id, simulator, signature_size, sign_latency_min_ms, sign_latency_max_ms):
        """
        Initialize a validator node.

        Args:
            node_id (int): Unique identifier for the validator.
            simulator: The simulator instance managing the simulation.
            signature_size (int): Size of the signature generated by the validator (in bytes).
            sign_latency_min_ms (int): Minimum latency for signature generation (in ms).
            sign_latency_max_ms (int): Maximum latency for signature generation (in ms).
        """
        super().__init__(node_id, simulator)
        self.signature_size = signature_size
        self.sign_latency_min_ms = sign_latency_min_ms
        self.sign_latency_max_ms = sign_latency_max_ms

    def generate_signature(self):
        """
        Generate a signature and send it to the assigned aggregators.
        """
        signature = {
            "validator_id": self.node_id,
            "data": "signature_data",  # Placeholder for actual signature data
            "size": self.signature_size,
        }
        message = Message(sender=self, payload=signature)
        self.send_to_aggregators(message)

    def send_to_aggregators(self, message):
        """
        Send the generated signature to the assigned aggregators.

        Args:
            message (Message): The message containing the signature.
        """
        for aggregator in self.get_connected_nodes():
            self.simulator.schedule_event(
                event_time=self.simulator.current_time + self.simulator.latency_model.calculate_latency(self, aggregator),
                event_callback=aggregator.receive_message,
                message=message,
            )

    def start_signature_generation(self):
        """
        Schedule the signature generation process with random latency.
        """
        latency = self.simulator.random.randint(self.sign_latency_min_ms, self.sign_latency_max_ms)
        self.simulator.schedule_event(
            event_time=self.simulator.current_time + latency,
            event_callback=self.generate_signature,
        )